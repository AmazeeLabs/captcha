<?php
// $Id$

function captcha_help($section = "admin/help#captcha") {
  $output = "";

  switch ($section) {
  case 'admin/help#captcha':
    $output .= "<p>Adds a Captcha to the registration form.</p>";
    $output .= "<p>More help needed here.</p>";
    break;
  case 'admin/modules#description':
    $output = t("Adds a Captcha to the registration form.");
    break;
  case 'admin/modules/captcha':
    $output = t("Adds a Captcha to the registration form.");
    break;
  case 'admin/captcha':
    $output = t("Adds a Captcha to the registration form.");
    break;
  }
  return $output;
}

/**
* Implementation of hook_menu().
*/
function captcha_menu($may_cache) {
  $items = array();
  
  $suffix = '';
  if (arg(2)!=null) $suffix='/'.arg(2);
  
  $items[] = array('path' => 'captcha/image'.$suffix, 'title' => t('captcha image'),
    'callback' => '_captcha_image', 'access' => user_access('access content'),
    'type' => MENU_CALLBACK);
  
  return $items;
}

function captcha_settings() {

  //check for GD
  if (!function_exists(imagecreate)) 
    form_set_error('No GD', t('Image library not available. Captcha needs the GD library extension to be installed. Please install GD.'));

  else {
  
    $fonts_path = variable_get("captcha_fonts_path", "");
    
    //check for TTF support
    if (!function_exists(imagettftext) || !function_exists(imagettfbox)) 
      form_set_error('No TTF support', t('Your image library does not seem to have TrueType font support. Captcha will work, but will use the default inbuilt font.'));
      
    else {

      //check for valid font path
      if ($fonts_path!="" && !is_dir($fonts_path))
        form_set_error('Invalid font path', t('The current font path is invalid. The default font will be used.'));
    }
  
  }
    
  $output .= form_checkbox(t('Check during user registration'), 'captcha_user_register', 'true', _captcha_istrue("captcha_user_register", "true"), 'If enabled, users will be asked to recognize an image during user registration.');
  
  $output .= form_checkbox(t('Check during anonymous comments'), 'captcha_comment_anonymous', 'true', _captcha_istrue("captcha_comment_anonymous"), 'If enabled, anonymous users will be asked to recognize an image while posting .');
  
  $output .= form_checkbox(t('Check during registered user comments'), 'captcha_comment_registered', 'true', _captcha_istrue("captcha_comment_registered"), 'If enabled, registered users will be asked to recognize an image while posting .');
  
  $output .= form_textfield(t('TrueType Fonts Path'), 'captcha_fonts_path', $fonts_path, 30, 255, 'Location of the directory where the Truetype (.ttf) fonts are stored. If you do not provide any fonts, the module will use the default font for text.');  
  return $output;
}

/**
* Implementation of hook_menu(), for adding form elements & validation.
*/
function captcha_user($type, &$edit, &$newuser, $category = NULL) {

  global $user;

  // What type of registration action are we taking?
  // make sure this is a registration, and captcha is enabled for registration
  if (_captcha_istrue("captcha_user_register") && !$newuser->uid && !$user->uid)
  switch ($type) {
    case t("register"):
    // Add two items to the resigtration form.
    
    $output .= form_item("", '<img src="'.url('captcha/image/'.time()).'" alt="Captcha Image: you will need to recognize the text in it."/>');
    $output .= form_textfield(t('Word'), 'captchaword', NULL, 15, 15, 'Please type in the letters/numbers that are shown in the image above.', NULL, TRUE);

    return array(array('title' => t('Verify Registration'), 'data'=>$output));

    break;
    case t("validate"):
    // The user has filled out the form and checked the "accept" box.
    if (strtolower($edit['captchaword']) == strtolower($_SESSION['captcha'])) {
      // on success return the values you want to store
      return array("captcha_correct" => 1);
    }
    else {
      // on error return an error message
      form_set_error('captchaword', t("Please re-recognize the word shown in the image."));
      return $edit;
    }
    break;
  }
}

/**
* Comment callback; adds captcha field to new comment form.
* NOTE: This will work ONLY if the patch at http://drupal.org/node/14708 has been applied. Let's hope the patch makes HEAD!
*/
function captcha_comment($op,$edit) {
  global $user;
  
  // check if captcha is enabled for form type
  if ($user->uid == 0 && !_captcha_istrue("captcha_comment_anonymous")) return;
  if ($user->uid != 0 && !_captcha_istrue("captcha_comment_registered")) return;

  switch ($op) {
    case 'validate':
      // only validate captcha once for a comment.
      // this implementation basically sets a flag when you've successfully validated a captcha;
      // any successive comment inserted uses and invalidates the set flag.
      if ($_SESSION['captcha_comment_correct']!='ok') {
        if (strtolower($edit['captchaword']) != '' && strtolower($edit['captchaword']) == strtolower($_SESSION['captcha'])) {
          $_SESSION['captcha_comment_correct'] = 'ok';
        }
        else {
          form_set_error('captcha', t('The user verification code you entered is not correct.'));
        }
      }
      break;
    case 'insert':
      //invalidate captcha after one comment insert
      $_SESSION['captcha_comment_correct'] = '';
      break;
      
    case 'form':
      $form_html = "";
      if ($_SESSION['captcha_comment_correct']!='ok') {
        $output .= form_item("", '<img src="'.url('captcha/image/'.time()).'" alt="Captcha Image: you will need to recognize the text in it."/>');
        $output .= form_textfield(t('Word'), 'captchaword', NULL, 15, 15, 'Please type in the letters/numbers that are shown in the image above.', NULL, TRUE);
        $form_html = form_group(t('Verify comment authorship'), $output);
      }
      return $form_html;
  }
} 

/**
* Returns a random string for use in a captcha
*/
function _captcha_code() {
    
    $consts='bcdgjxvmnprst';
    $vowels='aeiou';

    for ($x=0; $x < 6; $x++) {
      mt_srand ((double) microtime() * 1000000);
      $const[$x] = substr($consts,mt_rand(0,strlen($consts)-1),1);
      $vow[$x] = substr($vowels,mt_rand(0,strlen($vowels)-1),1);
    }
    
    $string = $const[0] . $vow[0] .$const[2] . $const[1] . $vow[1] . $const[3] . $vow[3] . $const[4];
    $string = substr($string,0,rand(5,8));
    
    //everytime we create a new code, we write it to session
    $_SESSION['captcha'] = $string;
    
    return $string;

}

/**
* Returns a random string for use in a captcha
*/
function _captcha_istrue($variable, $default="true") {
    return (variable_get($variable, "")=="true");
}

/**
* Returns an array of files with TTF extensions in the specified directory.
*/
function _captcha_font_list() {
  $fontdir = variable_get("captcha_fonts_path", "");
  
  $filelist = array();
  if ($handle = opendir($fontdir)) {
    while ($file = readdir($handle)) {
      if (preg_match("/\.ttf$/i",$file) == 1)
        $filelist[] = $fontdir.'/'.$file;
    }
    closedir($handle);
  }

  return $filelist;
}  

/**
* Prints an image containing a captcha code.
*/
function _captcha_image() {
    
    //if we don't have GD functions, we can't generate the image
    if (!function_exists('imagecreatetruecolor')) return;
    
    // Set headers
    header('Expires: Mon, 01 Jan 1997 05:00:00 GMT');
    header('Cache-Control: no-store, no-cache, must-revalidate');
    header('Cache-Control: post-check=0, pre-check=0', false);
    header('Pragma: no-cache');
    
    header('Content-type: image/png');

    $string = _captcha_code();
    
    //set up image, the first number is the width and the second is the height
    $im = imagecreatetruecolor(120, 20);
  
    //creates two variables to store color
    $background = imagecolorallocate($im, rand(180, 250), rand(180, 250), rand(180, 250));
    $foreground = imagecolorallocate($im, rand(0, 80), rand(0, 80), rand(0, 80));
    $middleground = imagecolorallocate($im, rand(200, 160), rand(200, 160), rand(200, 160));

    //fill image with bgcolor
    imagefill($im, 0, 0, $background);

    //writes string
    if (function_exists(imagettftext) && function_exists(imagettfbox) && is_dir($fonts_path)) {
      
      // Get truetype font list
      $fonts = _captcha_font_list();
  
      if (count($fonts) > 0) {
      
        // write text using a truetype font
        $charSize = 20;        // font size
        $charWidth = 0;        // width of previous character
        $x = 20;               // initial x position
  
        // iterate over characters
        for ($i=0;$i<strlen($string);$i++) {
  
          // define angle and position of character based on previous character dimension
          $x += $charWidth * rand(1.6,1.8);
          $y = rand(30,50);
          $charAngle = rand(-25,25);
          $char = substr($code,$i,1);
    
          // select random font
          $font = $fonts[rand(0,count($fonts)-1)];
    
          // draw character
          imagettftext($im,$charSize,$charAngle,$x,$y,$textColor,$font,$char);
          print $font;
    
          // capture character dimensions to increment x position
          //$bbox = imagettfbbox($charSize,$charAngle,$font,$char);
          $charWidth = max($bbox[0],$bbox[2],$bbox[4],$bbox[6]) - min($bbox[0],$bbox[2],$bbox[4],$bbox[6]);
        }
      }
      
      else {
      
        // write text using a built-in font
        $x = 40;
        $y = 25;
    
        for ($i=0;$i<strlen($code);$i++) {
          imagestring($img,5,$x,$y,substr($code,$i,1),$textColor);
          $x += 30;
        }
      
      }
      
    }
    
    else {
      imagestring($im, 5, 10, 0, $string, $foreground);
    }

    //strikethrough
    imageline($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $foreground);

    //rotate only if function is defined (many PHP installations have this function missing)
    if (function_exists('imagerotate')) {
      $im2 = imagerotate($im,rand(-20,45),$background);
      imagedestroy($im);
      $im = $im2;
    }

    $middleground = imagecolorallocatealpha($im, rand(160, 200), rand(160, 200), rand(160, 200), 80);
    //random shapes
    for ($x=0; $x<50;$x++) {
      imageline($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $middleground);
      imageellipse($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $middleground);
    }

    //output to browser
    imagepng($im);
    imagedestroy($im);

}

?>
