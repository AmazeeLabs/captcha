<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function captcha_help($section = 'admin/help#captcha') {
  $output = '';

  switch ($section) {
  case 'admin/help#captcha':
    $output .= '<p>'. t('Adds a Captcha to various forms to help prevent spam submissions.') .'</p>';
    // TODO: More help needed here.
    break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function captcha_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/captcha',
      'title' => t('Captcha'),
      'description' => t('Administer how and where Captchas are used.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('captcha_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

/**
 * Helper function generates admin settings page.
 */
function captcha_admin_settings() {

  // This is where you can add more captcha points.
  $captcha_points = array(
    'comment_form' => t('Comment form'),
    'user_login' => t('User login form'),
    'user_login_block' => t('User login form block'),
    'user_edit' => t('User edit form'),
    'user_register' => t('User registration form'),
    'user_pass' => t('User forgot password form'),
    'contact_mail_user' => t('User contact form'),
    'contact_mail_page' => t('Sitewide contact form'),
    'node_form' => t('Create a node'),
  );

  $roles = user_roles();

  foreach($roles as $role) {
    $varsuffix = strtr($role, ' ', '_') .'_captcha';
    $form[$varsuffix] = array(
      '#type' => 'fieldset',
      '#title' => t('Captcha points for the role @role', array('@role' => $role)),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    foreach($captcha_points as $captcha_point => $captcha_point_description) {
      $varname = $captcha_point .'_'. $varsuffix;
      $form[$varsuffix][$varname] = array(
        '#type' => 'checkbox',
        '#title' => $captcha_point_description,
        '#default_value' => variable_get($varname, NULL),
      );
    }
  }

  // preprocess array into a map
  foreach(module_implements('captchachallenge') as $module) {
    $captchamodules[$module] = $module;
  }

  $form['captcha_type'] = array(
    '#type' => 'select',
    '#title' => t('Type of captcha to use'),
    '#default_value' => variable_get('captcha_type', 'captcha'),
    '#options' => $captchamodules,
    '#description' => t('Select what kind of challenge you want to pose to the user.'),
  );

  $form['captcha_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional response description text'),
    '#default_value' => variable_get('captcha_description', ''),
    '#description' => t('This text will be added below the captcha response field.'),
  );

  $form['captcha_override_module_description'] = array(
    '#type' => 'checkbox',
    '#title' => t("Override module's form item description"),
    '#default_value' => variable_get('captcha_override_module_description', 0),
    '#description' => t("Override the captcha module's form item description to the one set above."),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 */
function captcha_form_alter($form_id, &$form) {
  global $user;
  $captcha_type = variable_get("captcha_type", NULL);

  if (!$captcha_type) {
    return;
  }

  $flag = TRUE;
  $trigger = NULL;

  foreach($user->roles as $role) {
    $candidate_trigger = $form_id .'_'. strtr($role, ' ', '_') .'_captcha';
    if (variable_get($candidate_trigger, NULL)) {
      $trigger = $candidate_trigger;
    }
    else {
      $flag = FALSE;
      break;
    }
  }
  if ($flag && isset($trigger)) {
    $form['#submit'] = array('captcha_submit' => array()) + $form['#submit'];
    if (!_captcha_validate($_POST['captcha_response'])) {
      if (module_hook($captcha_type, 'captchachallenge')) {
        call_user_func_array($captcha_type .'_captchachallenge', array(&$form, &$_SESSION['captcha']));
        if(variable_get('captcha_override_module_description', 0)) {
          unset($form['captcha_response']['#description']);
        }
        if (strlen(variable_get('captcha_description', '')) > 0) {
          if (isset($form['captcha_response']['#description'])) {
            $form['captcha_response']['#description'] .= ' '. variable_get('captcha_description', '');
          }
          else {
            $form['captcha_response']['#description'] = variable_get('captcha_description', '');
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_submit().
 *
 * On submit, captcha is reset.
 */
function captcha_submit() {
  if($_SESSION['captcha_correct']) {
    unset($_SESSION['captcha_correct']);
    unset($_SESSION['captcha']);
  }
}

/**
 * Helper function validates captchas.
 */
function _captcha_validate($captcha_response) {

  if ($_SESSION['captcha_correct']) {
    return TRUE;
  }
  if (is_array($captcha_response)) {
    $captcha_response = $captcha_response['#value'];
  }

  global $user;
  $captcha_type = variable_get("captcha_type", NULL);
  $trigger = NULL;

  if (module_hook($captcha_type, 'captchavalidate')) {
    call_user_func_array($captcha_type .'_captchavalidate', array(&$captcha_response, &$_SESSION['captcha_correct']));
  }

  return $_SESSION['captcha_correct'];
}

/**
 * Default implementation of the captcha challenge & validation
 */
function captcha_captchachallenge(&$form, &$captcha) {

  $x = rand(1,10);
  $y = rand(1,10);

  $captcha = (string)($x + $y);
  $form['captcha_response'] = array (
    '#type' => 'textfield',
    '#title' => t('Math Question: What is %problem?', array('%problem' => $x .' + '. $y)),
    '#description' => t('Please solve the math problem above and type in the result. e.g. for 1+1, type 2.'),
    '#weight' => 0,
    '#required' => TRUE,
    '#validate' => array('_captcha_validate' => array()),
  );
}

/**
 * Default implementation of the captcha validation function.
 */
function captcha_captchavalidate(&$captcha_word, &$correct) {
  $captcha_word = drupal_strtolower($captcha_word);
  
  if (($_SESSION['captcha'] != '') && ($captcha_word == $_SESSION['captcha'])) {
    $correct = TRUE;
  }
  else {
    $correct = FALSE;
    form_set_error('captcha_response', t('The answer you entered to the math problem is incorrect.'));
  }
}
