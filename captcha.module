<?php
// $Id$

function captcha_help($section = "admin/help#captcha") {
  $output = "";

  switch ($section) {
  case 'admin/help#captcha':
    $output .= "<p>Adds a Captcha to the registration form.</p>";
    $output .= "<p>More help needed here.</p>";
    break;
  case 'admin/modules#description':
    $output = t("Adds a Captcha to the registration form.");
    break;
  case 'admin/modules/captcha':
    $output = t("Adds a Captcha to the registration form.");
    break;
  case 'admin/captcha':
    $output = t("Adds a Captcha to the registration form.");
    break;
  }
  return $output;
}

/**
* Implementation of hook_menu().
*/
function captcha_menu($may_cache) {
  $items = array();

  $suffix = '';
  if (arg(2)!=null) $suffix='/'.arg(2);

  $items[] = array('path' => 'captcha/image'.$suffix, 'title' => t('captcha image'),
    'callback' => '_captcha_image', 'access' => user_access('access captchas'),
    'type' => MENU_CALLBACK);

  return $items;
}

function captcha_perm() {
  return array('access captchas');
}

function captcha_settings() {

  //check for GD
  if (!function_exists(imagecreate))
    form_set_error('No GD', t('Image library not available. Captcha needs the GD library extension to be installed. Please install GD.'));

  else {

    $fonts_path = variable_get("captcha_fonts_path", "");

    //check for TTF support
    if (!function_exists(imagettftext))

      drupal_set_message(t('Your image library does not seem to have TrueType font support. Captcha will work, but will use the default inbuilt font.'),'status');

    else {

      //check for valid font path
      if ($fonts_path!="" && !is_dir($fonts_path))
        form_set_error('Invalid font path', t('The current font path is invalid. The default font will be used.'));
    }

  }

  $form['captcha_user_register'] = array(
                                          '#type' => 'checkbox',
                                          '#title' => t('Check during user registration'),
                                          '#default_value' => _captcha_istrue("captcha_user_register", "true"),
                                          '#description' =>  t('If enabled, users will be asked to recognize an image during user registration.'),
                                        );
  $form['captcha_comment_anonymous'] = array(
                                          '#type' => 'checkbox',
                                          '#title' => t('Check during anonymous comments.'),
                                          '#default_value' => _captcha_istrue("captcha_comment_anonymous", "true"),
                                          '#description' =>   t('If enabled, anonymous users will be asked to recognize an image while posting .'),
                                        );

  $form['captcha_comment_registered'] = array(
                                          '#type' => 'checkbox',
                                          '#title' => t('Check during registered user comments.'),
                                          '#default_value' => _captcha_istrue("captcha_comment_registered", "true"),
                                          '#description' =>   t('If enabled, registered users will be asked to recognize an image while posting .'),
                                        );


  $form['captcha_fonts_path'] = array(
                                  '#type' => 'textfield',
                                  '#title' => t('TrueType Fonts Path'),
                                  '#default_value' =>  $fonts_path,
                                  '#size' => 30,
                                  '#maxlength' => 255,
                                  '#description' => t('Location of the directory where the Truetype (.ttf) fonts are stored. If you do not provide any fonts, the module will use the default font for text.'),
                                );


  if (isset($fonts_path)) {
    $imagefontinfo .= t('Number of fonts found: ').count(_captcha_font_list());
  }

  $gdinfo = gd_info();
  $imagefontinfo .= '<br />'.t('GD Version: ').$gdinfo["GD Version"];
  $imagefontinfo .= '<br />'.t(' FreeType Support: ');
  $imagefontinfo .= ($gdinfo["FreeType Support"]==true) ? 'True' : 'False';
  $imagefontinfo .= '<br />';

  $form['captcha_info'] = array (
                           '#type' => 'item',
                           '#title' => t('Image and font information'),
                           '#value' => $imagefontinfo,
                          );

  return $form;
}

/**
* Implementation of hook_menu(), for adding form elements & validation.
*/
function captcha_user($type, &$edit, &$newuser, $category = NULL) {

  global $user;

  // What type of registration action are we taking?
  // make sure this is a registration, and captcha is enabled for registration
  if (_captcha_istrue("captcha_user_register") && !$newuser->uid && !$user->uid) {
    switch ($type) {
      case 'register':
        // Add two items to the resigtration form.
        return array( t('Verify Registration') => _captcha_form());
        break;

      case 'validate':
        // The user has filled out the form and checked the "accept" box.
        if (_captcha_validate($edit['captcha_word']))   {
          $_SESSION['captcha']='';
          // on success return the values you want to store
          return array("captcha_correct" => 1);
        }
        else {
          // on error return an error message
          form_set_error('captcha_word', t("Please re-recognize the word shown in the image."));
          return $edit;
        }
        break;
    }
  }
}

/**
* Comment callback; adds captcha field to new comment form.
*/
function captcha_comment($edit, $op) {

  switch ($op) {
    case 'validate': //this is redundant, not followed
      // only validate captcha once for a comment.
      // this implementation basically sets a flag when you've successfully validated a captcha;
      // any successive comment inserted uses and invalidates the set flag.
      if (!$_SESSION['captcha_comment_correct']) {
        if (_captcha_validate($edit['captcha_word'])) {
          $_SESSION['captcha_comment_correct'] =  true;
          //reset captcha variable to prevent session highjacking vulnerability #26741
          $_SESSION['captcha']='';
        }
        else {
          form_set_error('captcha_word', t('The captcha verification code you entered is not correct.'));
        }
      }
      break;
    case 'insert':
      //invalidate captcha after one comment insert
      $_SESSION['captcha_comment_correct'] = false;
      $_SESSION['captcha']='';
      break;
  }
}

function _captcha_form() {

  $form['captcha_image'] = array (
    '#type' => 'item',
    '#title' =>  'captcha image',
    '#value' => '<img src="' . url('captcha/image/'.time()) . '"  alt="Captcha Image: you will need to recognize the text in it."/>',
  );

  $form['captcha_word'] = array (
    '#type' => 'textfield',
    '#title' => t('Word'),
    '#defaultvalue' => '',
    '#description' => t('Please type in the letters/numbers that are shown in the image above.'),
  );

  return $form;
}


function captcha_form_alter($formid, &$form) {

  global $user;

  switch($formid) {
    case 'comment_form':

      // check if captcha is enabled for form type
      if ($user->uid == 0 && !_captcha_istrue("captcha_comment_anonymous")) return;
      if ($user->uid != 0 && !_captcha_istrue("captcha_comment_registered")) return;

      // include logic to remove captcha if the current entry is a valid captcha
      if (!$_SESSION['captcha_comment_correct'] && !($_POST['edit']['captcha_word'] != '' && _captcha_validate($_POST['edit']['captcha_word']))) {
        $form['captcha'] = _captcha_form();
      } else {
        $_SESSION['captcha']='';
        unset($form['captcha']);
      }
      break;
  }
}

function _captcha_validate($string) {

  $captcha_word = drupal_strtolower($string);
  if ($captcha_word != $_SESSION['captcha']) {
    return false;
  }

  return true;
}

/**
* Returns a random string for use in a captcha
*/
function _captcha_code() {

    $consts='bcdgjxvmnprst';
    $vowels='aeiou';

    for ($x=0; $x < 6; $x++) {
      mt_srand ((double) microtime() * 1000000);
      $const[$x] = drupal_substr($consts,mt_rand(0,drupal_strlen($consts)-1),1);
      $vow[$x] = drupal_substr($vowels,mt_rand(0,drupal_strlen($vowels)-1),1);
    }

    $string = $const[0] . $vow[0] .$const[2] . $const[1] . $vow[1] . $const[3] . $vow[3] . $const[4];
    $string = drupal_substr($string,0,rand(5,8));

    //everytime we create a new code, we write it to session
    $_SESSION['captcha'] = drupal_strtolower($string);

    return $string;

}

/**
* Returns a random string for use in a captcha
*/
function _captcha_istrue($variable, $default="true") {
    return (variable_get($variable, "")== true);
}

/**
* Returns an array of files with TTF extensions in the specified directory.
*/
function _captcha_font_list() {
  $fontdir = variable_get("captcha_fonts_path", "");

  $filelist = array();
  if ($handle = opendir($fontdir)) {
    while ($file = readdir($handle)) {
      if (preg_match("/\.ttf$/i",$file) == 1)
        $filelist[] = $fontdir.'/'.$file;
    }
    closedir($handle);
  }

  return $filelist;
}

/**
* Prints an image containing a captcha code.
*/
function _captcha_image() {

    // there are a few hard coded functions I'd like to eliminate here,
    // but for the time being we'll let them be.

    //if we don't have GD2 functions, we can't generate the image
    if (!function_exists('imagecreatetruecolor')) return;

    // Set headers
    header('Expires: Mon, 01 Jan 1997 05:00:00 GMT');
    header('Cache-Control: no-store, no-cache, must-revalidate');
    header('Cache-Control: post-check=0, pre-check=0', false);
    header('Pragma: no-cache');

    header('Content-type: image/png');

    $string = _captcha_code();

    // set up image, the first number is the width and the second is the height
    $im = imagecreatetruecolor(180, 80);

    // creates two variables to store color
    $background = imagecolorallocate($im, rand(180, 250), rand(180, 250), rand(180, 250));
    $foreground = imagecolorallocate($im, rand(0, 80), rand(0, 80), rand(0, 80));

    // fill image with bgcolor
    imagefill($im, 0, 0, $background);

    // Get truetype font list
    $fonts = _captcha_font_list();

    // writes string
    if (function_exists(imagettftext) && count($fonts) > 0) {

      // write text using a truetype font
      $charSize = 24;        // font size
      $charWidth = 0;        // width of previous character
      $x = 10;               // initial x position
      $y = 30;

      // iterate over characters
      for ($i=0;$i<drupal_strlen($string);$i++) {
        // define angle and position of character based on previous character dimension
        $x += ($charWidth * rand(1.0, 1.6));
        $y += rand(-5,5);
        $charAngle = rand(-5,5);
        $charSize += rand(-2,2);
        $char = drupal_substr($string,$i,1);

        // select random font
        $font = $fonts[rand(0,count($fonts)-1)];

        // draw character
        imagettftext($im,$charSize,$charAngle,$x,$y,$foreground,$font,$char);

        // capture character dimensions to increment x position
        $bbox = imagettfbbox($charSize,$charAngle,$font,$char);
        $charWidth = max($bbox[0],$bbox[2],$bbox[4],$bbox[6]) - min($bbox[0],$bbox[2],$bbox[4],$bbox[6]);
      }
    }

    else {
      // write text using a built-in font
      $x = 10;
      $y = 0;

      for ($i=0;$i<drupal_strlen($string);$i++) {
        imagestring($im,5,$x,$y,drupal_substr($string,$i,1),$foreground);
        $x += rand(10,15);
        $y += rand(-4,4);
      }

    }

    // strikethrough
    imageline($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $foreground);

    // rotate only if function is defined (many PHP installations have this function missing)
    if (function_exists('imagerotate')) {
      $im2 = imagerotate($im,rand(-20,45),$background);
      imagedestroy($im);
      $im = $im2;
    }

    // add cloud only if function is defined (many PHP installations have this function missing)
    if (function_exists('imagecolorallocatealpha')) {
      $middleground = imagecolorallocatealpha($im, rand(160, 200), rand(160, 200), rand(160, 200), 80);

      // random shapes
      for ($x=0; $x<50;$x++) {
        imageline($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $middleground);
        imageellipse($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $middleground);
      }
    }

    //output to browser
    imagepng($im);
    imagedestroy($im);

}

?>