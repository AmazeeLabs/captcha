<?php
// $Id$

function captcha_help($section = "admin/help#captcha") {
  $output = "";

  switch ($section) {
  case 'admin/help#captcha':
    $output .= "<p>Adds a Captcha to the registration form.</p>";
    $output .= "<p>More help needed here.</p>";
    break;
  case 'admin/modules#description':
    $output = t("Adds a Captcha to the registration form.");
    break;
  case 'admin/modules/captcha':
    $output = t("Adds a Captcha to the registration form.");
    break;
  case 'admin/captcha':
    $output = t("Adds a Captcha to the registration form.");
    break;
  }
  return $output;
}

/**
* Implementation of hook_menu().
*/
function captcha_menu($may_cache) {
  $items = array();
  
  $suffix = '';
  if (arg(2)!=null) $suffix='/'.arg(2);
  
  $items[] = array('path' => 'captcha/image'.$suffix, 'title' => t('captcha image'),
    'callback' => '_captcha_image', 'access' => user_access('access content'),
    'type' => MENU_CALLBACK);
  
  return $items;
} 

function captcha_settings() {

  //check for GD
  if (!function_exists(imagecreate)) 
    form_set_error('No GD', t('Image library not available. Captcha needs the GD library extension to be installed. Please install GD.'));

  if (!is_writable(variable_get("captcha_image_path", ""))) form_set_error('Write Error', t('Can\'t write to image path. Please make sure the path exists, and is writable.'));

  $output .= form_textfield(t('Files Path'), 'captcha_image_path', variable_get("captcha_image_path", ""), 30, 255, 'Path where to store the images. Do NOT add a trailing slash.');
  $output .= form_textfield(t('Relative URL Path'), 'captcha_url_path', variable_get("captcha_url_path", ""), 30, 255, 'Relative path to the Captcha image. Usually same as files path. Do NOT add a trailing slash.');
  
  return $output;
}

/**
* Implementation of hook_menu(), for adding form elements & validation.
*/
function captcha_user($type, &$edit, &$user, $category = NULL) {

  // What type of registration action are we taking?
  //make sure this is a registration
  if (!$user->uid)
  switch ($type) {
    case t("register"):
    // Add two items to the resigtration form.

    $output .= form_item("",
               '<img src="'.url('captcha/image/'.time()).'" alt="Captcha Image: you will need to recognize the text in it."/>');

    $output .= form_textfield(t('Word'), 'captchaword', NULL, 15, 15, 'Please type in the letters/numbers that are shown in the image above.', NULL, TRUE);

    return array(array('title' => t('Verify Registration'), 'data'=>$output));

    break;
    case t("validate"):
    // The user has filled out the form and checked the "accept" box.
    if (strtolower($edit['captchaword']) == strtolower(sess_read('captcha'))) {
      // on success return the values you want to store
      return array("captcha_correct" => 1);
    }
    else {
      // on error return an error message
      form_set_error('captchaword', t("Please re-recognize the word shown in the image."));
      return $edit;
    }
    break;
  }
}


/**
* Returns a random string for use in a captcha
*/
function _captcha_code() {
    
    $consts='bcdgjxvmnprst';
    $vowels='aeiou';

    for ($x=0; $x < 6; $x++) {
      mt_srand ((double) microtime() * 1000000);
      $const[$x] = substr($consts,mt_rand(0,strlen($consts)-1),1);
      $vow[$x] = substr($vowels,mt_rand(0,strlen($vowels)-1),1);
    }
    
    $string = $const[0] . $vow[0] .$const[2] . $const[1] . $vow[1] . $const[3] . $vow[3] . $const[4];
    $string = substr($string,0,rand(5,8));
    
    //everytime we create a new code, we write it to session
    sess_write('captcha',$string);
    
    return $string;

}

/**
* Prints an image containing a captcha code.
*/
function _captcha_image() {
  
    // Set headers
    header('Expires: Mon, 01 Jan 1997 05:00:00 GMT');
    header('Cache-Control: no-store, no-cache, must-revalidate');
    header('Cache-Control: post-check=0, pre-check=0', false);
    header('Pragma: no-cache');
    
    header('Content-type: image/png');

    $string = _captcha_code();
    
    //set up image, the first number is the width and the second is the height
    $im = imagecreatetruecolor(120, 20);

    //creates two variables to store color
    $background = imagecolorallocate($im, rand(180, 250), rand(180, 250), rand(180, 250));
    $foreground = imagecolorallocate($im, rand(0, 80), rand(0, 80), rand(0, 80));
    $middleground = imagecolorallocate($im, rand(200, 160), rand(200, 160), rand(200, 160));

    //fill image with bgcolor
    imagefill($im, 0, 0, $background);

    //writes string
    imagestring($im, 5, 10, 0, $string, $foreground);

    //strikethrough
    imageline($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $foreground);

    //rotate only if function is defined (many PHP installations have this function missing)
    if (function_exists('imagerotate')) {
      $im2 = imagerotate($im,rand(-20,45),$background);
      imagedestroy($im);
      $im = $im2;
    }

    $middleground = imagecolorallocatealpha($im, rand(160, 200), rand(160, 200), rand(160, 200), 80);
    //random shapes
    for ($x=0; $x<50;$x++) {
      imageline($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $middleground);
      imageellipse($im, rand(0, 120), rand(0, 120), rand(0, 120), rand(0, 120), $middleground);
    }

    //output to browser
    imagepng($im);
    imagedestroy($im);

} 
?>